# Introduction

If you've interacted programmatically with Stardog, you've had to use at least a bit of the Stardog Native API for the RDF Language (SNARL API). Probably the most oft-used bit is the `Connection` class. Patterned after JDBC connections, `Connection` is intended to serve as the basis for interacting with a Stardog database within an application. The first draft of the `Connection` interface dates back to some internal emails in late 2010, and it first appeared in the repository on December 3, 2010. Over the ensuing six years, there have only been 28 non-javadoc changes to the interface, none of which have happened in the last 18 months. It's been a stable interface that seems to have served our users well. 

But the fact of the matter is that when it, and the rest of the SNARL API was written, the state of Java was a bit different. Java 6 had been out for a couple years by then, but amongst our customers, adoption was still minimal, so we were originally targeting Java 5! The much more pleasant world of lambda's, try-with-resources, or just using String in a switch statement were years away. And so it's remained, mostly untouched since late 2010, a relic of the past in form and function.

We've been spending a lot of time thinking about where the design of Stardog is going in 2017; you might have [read some about it recently](http://blog.stardog.com/reviewing-2016-previewing-2017/) as we recapped our exciting 2016. We are unifying _*ALL*_ the data. [Structured](http://blog.stardog.com/virtual-graphs-relational-data-in-stardog/), [unstructured](http://blog.stardog.com/unifying-unstructured-data/), and everything in between. So as we reconsider our design, and plan for future growth, I thought it was also past due to take another look at the tried and true SNARL API. A lot has changed since its first version six years ago and it was time to look at it with fresh eyes.

# Why change the API?

Let's set aside the ramifications of changing a public API first. It's not something we undertake lightly, and it's something we have always [taken seriously](http://docs.stardog.com/#_compatibility_policies). But Stardog is undergoing a fundamental change in how it's engineered, and the API should reflect that new reality. We also have 6 years of experience using the SNARL API, and 6 years of better understanding of how the system wants to be used. 

As I said, the Java world has come a long way since Stardog was born. If for nothing else, there's _a lot_ to be gained from simply leveraging `Stream`s and lambdas. We weakly embraced this the last time we changed the API, but they weren't radical; we were only dipping our toe in the water. There are a lot of improvements we can make in this area alone.

But a lot has changed in the Stardog world too. When the `Connection` class and the rest of the SNARL API was originally created, we were months from our _first_ public release. We knew we'd be doing one early the following year, which was the impetus for creating SNARL, but at the time, most fundamental features we take for granted now still were not a part of the system. Features such as Disk-based databases, the reasoner, CLI, security, even transactions. So there it was, the public face of Stardog for years to come, built when the system was not much more than an query engine and memory-based indexes that were simple, sorted arrays. And we've hardly changed it since.

# Going Reactive

I'd first heard about reactive programming not from the [manifesto](http://www.reactivemanifesto.org/) but from some binge watching/listening of Erik Meijer videos. If you haven't watched any of Erik Meijer's talks, do yourself a favor and go watch a couple when you're done reading this. You'll learn something, and you'll definitely laugh. [His talk a few years ago](https://www.youtube.com/watch?v=sTSQlYX5DU0) was my first time hearing of it. 

I've seen it referred to as the "Observer pattern done right", which is fair. It _is_ basically the Observer Pattern. The primary difference is that it adds error and completion semantics. You can also just think about them as `Iterable`s. The only difference is it's push vs pull, and instead of the barebones `Iterable` API, you get `Stream` plus [a whole lot more](http://reactivex.io/documentation/operators.html).

But for me, it was easier to just think about it as a way to work with streams of data, a common example would be a click stream from the mouse.These streams are a simple sequence of events: `Value`, `Error`, and `Complete`. `Error` and `Complete` are actually mutually exclusive. Things worked, or they didn't, but not both. It's not rocket science. You can get zero or more `Value`s before the termination event (i.e. `Error` or `Complete`). [This is](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754) a _great_ explanation of reactive principles in terms of a click stream.

Basic usage of a reactive API would look very similar to the Java Stream API:

```java
getResults()
	.skip(10)
	.take(5)
	.map(String::toString)
	.subscribe(System.err::println)
```

Apply an offset and limit, turn the `Value`s into `String`s and print them out; `subscribe` in this case is akin to `forEach`. Add on top of the the trove of operators, [scheduling] (http://reactivex.io/documentation/scheduler.html), and [backpressure](http://reactivex.io/documentation/operators/backpressure.html), it's easy to see how this approach can provide the building blocks for a powerful and flexible API.

It was something that really piqued my interest, but I didn't quite have an idea where it would fit into the Stardog picture, so I shelved it for later.

These are a few other links that I found useful when trying to grok this stuff:
* [Functional Reactive Programming with RxJava](https://www.youtube.com/watch?v=_t06LRX0DV0)
* [Reactive Streams 1.0.0 interview](https://medium.com/@viktorklang/reactive-streams-1-0-0-interview-faaca2c00bec#.sltmxsno4)
* [Reactive Programming at scale](https://medium.com/@johnmcclean/reactive-programming-at-scale-6f695e70959b#.tp4qlypl8)
* [Comparison of Reactive-Streams implementations](http://akarnokd.blogspot.hu/2015/10/comparison-of-reactive-streams.html)

# But why Reactive?

This is a two part question, why reactive, in our case [RxJava 2](https://github.com/ReactiveX/RxJava), instead of `Future`, and why is it a good fit for Stardog's API?

## Why not use `Future`?

This is a fair question. One downside to going with the reactive pattern is that it's not as widely known as, say, `Future`. That is probably going to have a negative affect on the learning curve. And we have always tried to maximize developer happiness and productivity because after all, we're developers too, and we look after our own.

Java 8 improves `Future`. Before we changed from Java 6 to Java 8, I would have told you that `Future` is not easily composable and that doing error handling is cumbersome. The changes introduced in Java 8 go a long way to improving this. `Future` also gives us some of the lazy/asynchronous joy we can get out of reactive, especially if we're just waiting on a single result. For example, did dropping the database work or not? `Future<Void>` is a good match for this. 

However, it's easy to kill some of that joy by calling `Future#get` too early. If you do that, you're stuck waiting. You can use callbacks to help addres this, and [Guava](https://github.com/google/guava/wiki/ListenableFutureExplained) has some nice support for this, but, I think callbacks can get out of control quickly.

There's also the problem of `Future` is single valued. So do you use `Future<Collection<T>>` or `Collection<Future<V>>`. Probably the latter, but like I said just above, if the first one in the collection we call `Future#get` on isn't done, we're blocked from getting results from _anything_ else in the collection.

Scheduling is pretty straight-forward, but there's no notion of backpressure, you've got to roll your own. And what about enhancing the `Future`, like attaching a progress listener to the asynchronous task? You'll need to bake that into anything you want to keep tabs on.

My first attempts to sketch out some ideas based on `Future` just felt cumbersome. For what I had in mind, a reactive design just felt more intuitive and natural to use.

## Why use it for SNARL?

Distributed systems are hard. One of the hardest things to internalize, and then design for is [failure](https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/#fail). Instead of running one node, you run three so there's no single point of failure, but now there are a million more things that can go wrong. Fault tolerance, including finding ways to be partially available must be a fundamental part of the system. Furthermore, you need to keep a close eye on things, so when failures do occur, and they will, you can manually intervene if need be; replace failing nodes, add more capacity, etc. 

This is a big change from a single node system. We've been building in, around, and on top of our existing API as the cluster has matured and as we've begun the shift from a vertically scaling system to a horizontally scalable one. One thing I felt was clear was that a lot of these concerns needed to be built into the system, rather than on top of it.

We'd already been using Apache Curator for the cluster, which is something that grew out of the Netflix Open Source treasure trove. From my experiences with that, I knew about [Hystrix](https://github.com/Netflix/Hystrix), and more generally the [Circuit Breaker pattern](https://martinfowler.com/bliki/CircuitBreaker.html). From the Hystrix wiki:

> Hystrix is designed to do the following:
>  * Give protection from and control over latency and failure from dependencies accessed (typically over the network) via third-party client libraries.
>  * Stop cascading failures in a complex distributed system.
>  * Fail fast and rapidly recover.
>  * Fallback and gracefully degrade when possible.
>  * Enable near real-time monitoring, alerting, and operational control.

Check, check, and check. That's a good place to start. It's even got steps toward [monitoring](https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring). This can be part of the glue between the different parts of Stardog, but it's almost an implementation detail rather than something that's part of the API. However, plays [very nicely with RxJava](https://github.com/Netflix/Hystrix/wiki/How-To-Use#reactive-execution). So now a couple different ideas all seem to be coming together to provide the building blocks for the next generation of the SNARL API.

The switch in design isn't without it's drawbacks. I've already touched on the familiarity of `Future` amongst developers vs the relative unfamiliarity of reactive APIS. Other areas of concern are that extending `Flowable` is cumbersome, but doable, while `Observable` is not. The distinction between hot vs cold observables is rarely obvious, you really have to pick one style and stick with it, because let's face it developers aren't going to read the `@implNote` in the docs to find out which until after there's a bug. And debugging can be an exercise in interpreting more convoluted stack traces. Finally, understanding what errors an exception "throws" is less clear. There's no `throws` declaration to rely on as exceptions are reported to subscribers directly. You have to read the javadocs to know what kinds of exceptions can be thrown.

But overall, it's a very positive step forward for the SNARL API and something I'm personally very excited about.

# Coming Up Next

This is the first in a two part series discussing the upcoming changes to the SNARL API. In the final installment we'll be taking a closer look at the API itself.
